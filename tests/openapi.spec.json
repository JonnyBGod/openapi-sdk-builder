{
  "swagger":"2.0",
  "info":{
    "version":"1.0.0",
    "title":"api"
  },
  "basePath":"/api",
  "paths":{
    "/AccessTokens/{id}/user":{
      "get":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Fetches belongsTo relation user.",
        "operationId":"AccessToken.prototype.__get__user",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"AccessToken id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"refresh",
            "in":"query",
            "required":false,
            "type":"boolean"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens":{
      "post":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Create a new instance of the model and persist it into the data source.",
        "operationId":"AccessToken.create",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Patch an existing model instance or insert a new one into the data source.",
        "operationId":"AccessToken.patchOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"AccessToken.replaceOrCreate__put_AccessTokens",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Find all instances of the model matched by filter from the data source.",
        "operationId":"AccessToken.find",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/AccessToken"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/replaceOrCreate":{
      "post":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"AccessToken.replaceOrCreate__post_AccessTokens_replaceOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/upsertWithWhere":{
      "post":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId":"AccessToken.upsertWithWhere",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/{id}/exists":{
      "get":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"AccessToken.exists__get_AccessTokens_{id}_exists",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/{id}":{
      "head":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"AccessToken.exists__head_AccessTokens_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Find a model instance by {{id}} from the data source.",
        "operationId":"AccessToken.findById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"AccessToken.replaceById__put_AccessTokens_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Delete a model instance by {{id}} from the data source.",
        "operationId":"AccessToken.deleteById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Patch attributes for a model instance and persist it into the data source.",
        "operationId":"AccessToken.prototype.patchAttributes",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"AccessToken id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/{id}/replace":{
      "post":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"AccessToken.replaceById__post_AccessTokens_{id}_replace",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/findOne":{
      "get":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Find first instance of the model matched by filter from the data source.",
        "operationId":"AccessToken.findOne",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/update":{
      "post":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Update instances of the model matched by {{where}} from the data source.",
        "operationId":"AccessToken.updateAll",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "description":"Information related to the outcome of the operation",
              "type":"object",
              "properties":{
                "count":{
                  "description":"The number of instances updated",
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/count":{
      "get":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Count instances of the model matched by where from the data source.",
        "operationId":"AccessToken.count",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/AccessTokens/change-stream":{
      "post":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Create a change stream.",
        "operationId":"AccessToken.createChangeStream__post_AccessTokens_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"formData",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "AccessToken"
        ],
        "summary":"Create a change stream.",
        "operationId":"AccessToken.createChangeStream__get_AccessTokens_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs":{
      "post":{
        "tags":[
          "ACL"
        ],
        "summary":"Create a new instance of the model and persist it into the data source.",
        "operationId":"ACL.create",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "ACL"
        ],
        "summary":"Patch an existing model instance or insert a new one into the data source.",
        "operationId":"ACL.patchOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "ACL"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"ACL.replaceOrCreate__put_ACLs",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "ACL"
        ],
        "summary":"Find all instances of the model matched by filter from the data source.",
        "operationId":"ACL.find",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/ACL"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/replaceOrCreate":{
      "post":{
        "tags":[
          "ACL"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"ACL.replaceOrCreate__post_ACLs_replaceOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/upsertWithWhere":{
      "post":{
        "tags":[
          "ACL"
        ],
        "summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId":"ACL.upsertWithWhere",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/{id}/exists":{
      "get":{
        "tags":[
          "ACL"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"ACL.exists__get_ACLs_{id}_exists",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/{id}":{
      "head":{
        "tags":[
          "ACL"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"ACL.exists__head_ACLs_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "ACL"
        ],
        "summary":"Find a model instance by {{id}} from the data source.",
        "operationId":"ACL.findById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "ACL"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"ACL.replaceById__put_ACLs_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "ACL"
        ],
        "summary":"Delete a model instance by {{id}} from the data source.",
        "operationId":"ACL.deleteById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "ACL"
        ],
        "summary":"Patch attributes for a model instance and persist it into the data source.",
        "operationId":"ACL.prototype.patchAttributes",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"ACL id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/{id}/replace":{
      "post":{
        "tags":[
          "ACL"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"ACL.replaceById__post_ACLs_{id}_replace",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/findOne":{
      "get":{
        "tags":[
          "ACL"
        ],
        "summary":"Find first instance of the model matched by filter from the data source.",
        "operationId":"ACL.findOne",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/update":{
      "post":{
        "tags":[
          "ACL"
        ],
        "summary":"Update instances of the model matched by {{where}} from the data source.",
        "operationId":"ACL.updateAll",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/ACL"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "description":"Information related to the outcome of the operation",
              "type":"object",
              "properties":{
                "count":{
                  "description":"The number of instances updated",
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/count":{
      "get":{
        "tags":[
          "ACL"
        ],
        "summary":"Count instances of the model matched by where from the data source.",
        "operationId":"ACL.count",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/ACLs/change-stream":{
      "post":{
        "tags":[
          "ACL"
        ],
        "summary":"Create a change stream.",
        "operationId":"ACL.createChangeStream__post_ACLs_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"formData",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "ACL"
        ],
        "summary":"Create a change stream.",
        "operationId":"ACL.createChangeStream__get_ACLs_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/{id}/role":{
      "get":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Fetches belongsTo relation role.",
        "operationId":"RoleMapping.prototype.__get__role",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"RoleMapping id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"refresh",
            "in":"query",
            "required":false,
            "type":"boolean"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings":{
      "post":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Create a new instance of the model and persist it into the data source.",
        "operationId":"RoleMapping.create",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Patch an existing model instance or insert a new one into the data source.",
        "operationId":"RoleMapping.patchOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"RoleMapping.replaceOrCreate__put_RoleMappings",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Find all instances of the model matched by filter from the data source.",
        "operationId":"RoleMapping.find",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/RoleMapping"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/replaceOrCreate":{
      "post":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"RoleMapping.replaceOrCreate__post_RoleMappings_replaceOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/upsertWithWhere":{
      "post":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId":"RoleMapping.upsertWithWhere",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/{id}/exists":{
      "get":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"RoleMapping.exists__get_RoleMappings_{id}_exists",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/{id}":{
      "head":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"RoleMapping.exists__head_RoleMappings_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Find a model instance by {{id}} from the data source.",
        "operationId":"RoleMapping.findById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"RoleMapping.replaceById__put_RoleMappings_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Delete a model instance by {{id}} from the data source.",
        "operationId":"RoleMapping.deleteById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Patch attributes for a model instance and persist it into the data source.",
        "operationId":"RoleMapping.prototype.patchAttributes",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"RoleMapping id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/{id}/replace":{
      "post":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"RoleMapping.replaceById__post_RoleMappings_{id}_replace",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/findOne":{
      "get":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Find first instance of the model matched by filter from the data source.",
        "operationId":"RoleMapping.findOne",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/update":{
      "post":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Update instances of the model matched by {{where}} from the data source.",
        "operationId":"RoleMapping.updateAll",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "description":"Information related to the outcome of the operation",
              "type":"object",
              "properties":{
                "count":{
                  "description":"The number of instances updated",
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/count":{
      "get":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Count instances of the model matched by where from the data source.",
        "operationId":"RoleMapping.count",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/RoleMappings/change-stream":{
      "post":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Create a change stream.",
        "operationId":"RoleMapping.createChangeStream__post_RoleMappings_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"formData",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "RoleMapping"
        ],
        "summary":"Create a change stream.",
        "operationId":"RoleMapping.createChangeStream__get_RoleMappings_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/{id}/principals/{fk}":{
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Find a related item by id for principals.",
        "operationId":"Role.prototype.__findById__principals",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Role id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for principals",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Role"
        ],
        "summary":"Delete a related item by id for principals.",
        "operationId":"Role.prototype.__destroyById__principals",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Role id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for principals",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Role"
        ],
        "summary":"Update a related item by id for principals.",
        "operationId":"Role.prototype.__updateById__principals",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Role id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for principals",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "required":false,
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/{id}/principals":{
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Queries principals of Role.",
        "operationId":"Role.prototype.__get__principals",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Role id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/RoleMapping"
              }
            }
          }
        },
        "deprecated":false
      },
      "post":{
        "tags":[
          "Role"
        ],
        "summary":"Creates a new instance in principals of this model.",
        "operationId":"Role.prototype.__create__principals",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Role id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "required":false,
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Role"
        ],
        "summary":"Deletes all principals of this model.",
        "operationId":"Role.prototype.__delete__principals",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Role id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      }
    },
    "/Roles/{id}/principals/count":{
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Counts principals of Role.",
        "operationId":"Role.prototype.__count__principals",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Role id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles":{
      "post":{
        "tags":[
          "Role"
        ],
        "summary":"Create a new instance of the model and persist it into the data source.",
        "operationId":"Role.create",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "Role"
        ],
        "summary":"Patch an existing model instance or insert a new one into the data source.",
        "operationId":"Role.patchOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Role"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"Role.replaceOrCreate__put_Roles",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Find all instances of the model matched by filter from the data source.",
        "operationId":"Role.find",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/Role"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/replaceOrCreate":{
      "post":{
        "tags":[
          "Role"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"Role.replaceOrCreate__post_Roles_replaceOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/upsertWithWhere":{
      "post":{
        "tags":[
          "Role"
        ],
        "summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId":"Role.upsertWithWhere",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/{id}/exists":{
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"Role.exists__get_Roles_{id}_exists",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/{id}":{
      "head":{
        "tags":[
          "Role"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"Role.exists__head_Roles_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Find a model instance by {{id}} from the data source.",
        "operationId":"Role.findById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Role"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"Role.replaceById__put_Roles_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Role"
        ],
        "summary":"Delete a model instance by {{id}} from the data source.",
        "operationId":"Role.deleteById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "Role"
        ],
        "summary":"Patch attributes for a model instance and persist it into the data source.",
        "operationId":"Role.prototype.patchAttributes",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Role id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/{id}/replace":{
      "post":{
        "tags":[
          "Role"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"Role.replaceById__post_Roles_{id}_replace",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/findOne":{
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Find first instance of the model matched by filter from the data source.",
        "operationId":"Role.findOne",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/update":{
      "post":{
        "tags":[
          "Role"
        ],
        "summary":"Update instances of the model matched by {{where}} from the data source.",
        "operationId":"Role.updateAll",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "description":"Information related to the outcome of the operation",
              "type":"object",
              "properties":{
                "count":{
                  "description":"The number of instances updated",
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/count":{
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Count instances of the model matched by where from the data source.",
        "operationId":"Role.count",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Roles/change-stream":{
      "post":{
        "tags":[
          "Role"
        ],
        "summary":"Create a change stream.",
        "operationId":"Role.createChangeStream__post_Roles_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"formData",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Role"
        ],
        "summary":"Create a change stream.",
        "operationId":"Role.createChangeStream__get_Roles_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos":{
      "post":{
        "tags":[
          "Todo"
        ],
        "summary":"Create a new instance of the model and persist it into the data source.",
        "operationId":"Todo.create",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "Todo"
        ],
        "summary":"Patch an existing model instance or insert a new one into the data source.",
        "operationId":"Todo.patchOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Todo"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"Todo.replaceOrCreate__put_todos",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Todo"
        ],
        "summary":"Find all instances of the model matched by filter from the data source.",
        "operationId":"Todo.find",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/Todo"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/replaceOrCreate":{
      "post":{
        "tags":[
          "Todo"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"Todo.replaceOrCreate__post_todos_replaceOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/upsertWithWhere":{
      "post":{
        "tags":[
          "Todo"
        ],
        "summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId":"Todo.upsertWithWhere",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/{id}/exists":{
      "get":{
        "tags":[
          "Todo"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"Todo.exists__get_todos_{id}_exists",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/{id}":{
      "head":{
        "tags":[
          "Todo"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"Todo.exists__head_todos_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Todo"
        ],
        "summary":"Find a model instance by {{id}} from the data source.",
        "operationId":"Todo.findById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Todo"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"Todo.replaceById__put_todos_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Todo"
        ],
        "summary":"Delete a model instance by {{id}} from the data source.",
        "operationId":"Todo.deleteById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "Todo"
        ],
        "summary":"Patch attributes for a model instance and persist it into the data source.",
        "operationId":"Todo.prototype.patchAttributes",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Todo id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/{id}/replace":{
      "post":{
        "tags":[
          "Todo"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"Todo.replaceById__post_todos_{id}_replace",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/findOne":{
      "get":{
        "tags":[
          "Todo"
        ],
        "summary":"Find first instance of the model matched by filter from the data source.",
        "operationId":"Todo.findOne",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Todo"
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/update":{
      "post":{
        "tags":[
          "Todo"
        ],
        "summary":"Update instances of the model matched by {{where}} from the data source.",
        "operationId":"Todo.updateAll",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Todo"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "description":"Information related to the outcome of the operation",
              "type":"object",
              "properties":{
                "count":{
                  "description":"The number of instances updated",
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/count":{
      "get":{
        "tags":[
          "Todo"
        ],
        "summary":"Count instances of the model matched by where from the data source.",
        "operationId":"Todo.count",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/change-stream":{
      "post":{
        "tags":[
          "Todo"
        ],
        "summary":"Create a change stream.",
        "operationId":"Todo.createChangeStream__post_todos_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"formData",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Todo"
        ],
        "summary":"Create a change stream.",
        "operationId":"Todo.createChangeStream__get_todos_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/my-remote":{
      "get":{
        "tags":[
          "Todo"
        ],
        "operationId":"Todo.myRemote",
        "parameters":[

        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "result":{
                  "type":"array",
                  "items":{
                    "type":"object"
                  }
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/todos/stats":{
      "get":{
        "tags":[
          "Todo"
        ],
        "summary":"Statistical information for Todo registers.",
        "operationId":"Todo.stats",
        "parameters":[
          {
            "name":"range",
            "in":"query",
            "description":"hourly, daily, weekly, monthly, yearly, custom",
            "required":true,
            "type":"string"
          },
          {
            "name":"custom",
            "in":"query",
            "description":"{\"start\": date, \"end\": date }",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"where",
            "in":"query",
            "description":"where filter ",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"groupBy",
            "in":"query",
            "description":"group by filter ",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/x-any"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes":{
      "post":{
        "tags":[
          "Note"
        ],
        "summary":"Create a new instance of the model and persist it into the data source.",
        "operationId":"Note.create",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "Note"
        ],
        "summary":"Patch an existing model instance or insert a new one into the data source.",
        "operationId":"Note.patchOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Note"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"Note.replaceOrCreate__put_Notes",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Note"
        ],
        "summary":"Find all instances of the model matched by filter from the data source.",
        "operationId":"Note.find",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/Note"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/replaceOrCreate":{
      "post":{
        "tags":[
          "Note"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"Note.replaceOrCreate__post_Notes_replaceOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/upsertWithWhere":{
      "post":{
        "tags":[
          "Note"
        ],
        "summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId":"Note.upsertWithWhere",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/{id}/exists":{
      "get":{
        "tags":[
          "Note"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"Note.exists__get_Notes_{id}_exists",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/{id}":{
      "head":{
        "tags":[
          "Note"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"Note.exists__head_Notes_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Note"
        ],
        "summary":"Find a model instance by {{id}} from the data source.",
        "operationId":"Note.findById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Note"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"Note.replaceById__put_Notes_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Note"
        ],
        "summary":"Delete a model instance by {{id}} from the data source.",
        "operationId":"Note.deleteById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "Note"
        ],
        "summary":"Patch attributes for a model instance and persist it into the data source.",
        "operationId":"Note.prototype.patchAttributes",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Note id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/{id}/replace":{
      "post":{
        "tags":[
          "Note"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"Note.replaceById__post_Notes_{id}_replace",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/findOne":{
      "get":{
        "tags":[
          "Note"
        ],
        "summary":"Find first instance of the model matched by filter from the data source.",
        "operationId":"Note.findOne",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Note"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/update":{
      "post":{
        "tags":[
          "Note"
        ],
        "summary":"Update instances of the model matched by {{where}} from the data source.",
        "operationId":"Note.updateAll",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Note"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "description":"Information related to the outcome of the operation",
              "type":"object",
              "properties":{
                "count":{
                  "description":"The number of instances updated",
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/count":{
      "get":{
        "tags":[
          "Note"
        ],
        "summary":"Count instances of the model matched by where from the data source.",
        "operationId":"Note.count",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/change-stream":{
      "post":{
        "tags":[
          "Note"
        ],
        "summary":"Create a change stream.",
        "operationId":"Note.createChangeStream__post_Notes_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"formData",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Note"
        ],
        "summary":"Create a change stream.",
        "operationId":"Note.createChangeStream__get_Notes_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/my-remote":{
      "get":{
        "tags":[
          "Note"
        ],
        "operationId":"Note.myRemote",
        "parameters":[

        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "result":{
                  "type":"array",
                  "items":{
                    "type":"object"
                  }
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Notes/stats":{
      "get":{
        "tags":[
          "Note"
        ],
        "summary":"Statistical information for Note registers.",
        "operationId":"Note.stats",
        "parameters":[
          {
            "name":"range",
            "in":"query",
            "description":"hourly, daily, weekly, monthly, yearly, custom",
            "required":true,
            "type":"string"
          },
          {
            "name":"custom",
            "in":"query",
            "description":"{\"start\": date, \"end\": date }",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"where",
            "in":"query",
            "description":"where filter ",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"groupBy",
            "in":"query",
            "description":"group by filter ",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/x-any"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Containers":{
      "get":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.getContainers",
        "parameters":[

        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/x-any"
              }
            }
          }
        },
        "deprecated":false
      },
      "post":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.createContainer",
        "parameters":[
          {
            "name":"options",
            "in":"body",
            "required":false,
            "schema":{
              "type":"object"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Containers/{container}":{
      "delete":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.destroyContainer",
        "parameters":[
          {
            "name":"container",
            "in":"path",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "undefined":{
                  "type":"object"
                }
              }
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.getContainer",
        "parameters":[
          {
            "name":"container",
            "in":"path",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Containers/{container}/files":{
      "get":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.getFiles",
        "parameters":[
          {
            "name":"container",
            "in":"path",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/x-any"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Containers/{container}/files/{file}":{
      "get":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.getFile",
        "parameters":[
          {
            "name":"container",
            "in":"path",
            "required":false,
            "type":"string"
          },
          {
            "name":"file",
            "in":"path",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.removeFile",
        "parameters":[
          {
            "name":"container",
            "in":"path",
            "required":false,
            "type":"string"
          },
          {
            "name":"file",
            "in":"path",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "undefined":{
                  "type":"object"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Containers/{container}/upload":{
      "post":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.upload",
        "parameters":[

        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "result":{
                  "type":"object"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Containers/{container}/download/{file}":{
      "get":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.download",
        "parameters":[
          {
            "name":"container",
            "in":"path",
            "required":false,
            "type":"string"
          },
          {
            "name":"file",
            "in":"path",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      }
    },
    "/Containers/my-remote":{
      "get":{
        "tags":[
          "Container"
        ],
        "operationId":"Container.myRemote",
        "parameters":[

        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "result":{
                  "type":"array",
                  "items":{
                    "type":"object"
                  }
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Containers/stats":{
      "get":{
        "tags":[
          "Container"
        ],
        "summary":"Statistical information for Container registers.",
        "operationId":"Container.stats",
        "parameters":[
          {
            "name":"range",
            "in":"query",
            "description":"hourly, daily, weekly, monthly, yearly, custom",
            "required":true,
            "type":"string"
          },
          {
            "name":"custom",
            "in":"query",
            "description":"{\"start\": date, \"end\": date }",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"where",
            "in":"query",
            "description":"where filter ",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"groupBy",
            "in":"query",
            "description":"group by filter ",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/x-any"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/accessTokens/{fk}":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Find a related item by id for accessTokens.",
        "operationId":"Account.prototype.__findById__accessTokens",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for accessTokens",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Account"
        ],
        "summary":"Delete a related item by id for accessTokens.",
        "operationId":"Account.prototype.__destroyById__accessTokens",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for accessTokens",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Account"
        ],
        "summary":"Update a related item by id for accessTokens.",
        "operationId":"Account.prototype.__updateById__accessTokens",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for accessTokens",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "required":false,
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/roles/{fk}":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Find a related item by id for roles.",
        "operationId":"Account.prototype.__findById__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for roles",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Account"
        ],
        "summary":"Delete a related item by id for roles.",
        "operationId":"Account.prototype.__destroyById__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for roles",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Account"
        ],
        "summary":"Update a related item by id for roles.",
        "operationId":"Account.prototype.__updateById__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for roles",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "required":false,
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/roles/rel/{fk}":{
      "put":{
        "tags":[
          "Account"
        ],
        "summary":"Add a related item by id for roles.",
        "operationId":"Account.prototype.__link__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for roles",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "required":false,
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/RoleMapping"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Account"
        ],
        "summary":"Remove the roles relation to an item by id.",
        "operationId":"Account.prototype.__unlink__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for roles",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      },
      "head":{
        "tags":[
          "Account"
        ],
        "summary":"Check the existence of roles relation to an item by id.",
        "operationId":"Account.prototype.__exists__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"fk",
            "in":"path",
            "description":"Foreign key for roles",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"boolean"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/accessTokens":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Queries accessTokens of Account.",
        "operationId":"Account.prototype.__get__accessTokens",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/AccessToken"
              }
            }
          }
        },
        "deprecated":false
      },
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Creates a new instance in accessTokens of this model.",
        "operationId":"Account.prototype.__create__accessTokens",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "required":false,
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/AccessToken"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Account"
        ],
        "summary":"Deletes all accessTokens of this model.",
        "operationId":"Account.prototype.__delete__accessTokens",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/accessTokens/count":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Counts accessTokens of Account.",
        "operationId":"Account.prototype.__count__accessTokens",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/roles":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Queries roles of Account.",
        "operationId":"Account.prototype.__get__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/Role"
              }
            }
          }
        },
        "deprecated":false
      },
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Creates a new instance in roles of this model.",
        "operationId":"Account.prototype.__create__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "required":false,
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Role"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Account"
        ],
        "summary":"Deletes all roles of this model.",
        "operationId":"Account.prototype.__delete__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/roles/count":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Counts roles of Account.",
        "operationId":"Account.prototype.__count__roles",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Create a new instance of the model and persist it into the data source.",
        "operationId":"Account.create",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "Account"
        ],
        "summary":"Patch an existing model instance or insert a new one into the data source.",
        "operationId":"Account.patchOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Account"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"Account.replaceOrCreate__put_Accounts",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Find all instances of the model matched by filter from the data source.",
        "operationId":"Account.find",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/Account"
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/replaceOrCreate":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Replace an existing model instance or insert a new one into the data source.",
        "operationId":"Account.replaceOrCreate__post_Accounts_replaceOrCreate",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/upsertWithWhere":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId":"Account.upsertWithWhere",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/exists":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"Account.exists__get_Accounts_{id}_exists",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}":{
      "head":{
        "tags":[
          "Account"
        ],
        "summary":"Check whether a model instance exists in the data source.",
        "operationId":"Account.exists__head_Accounts_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "exists":{
                  "type":"boolean"
                }
              }
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Find a model instance by {{id}} from the data source.",
        "operationId":"Account.findById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      },
      "put":{
        "tags":[
          "Account"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"Account.replaceById__put_Accounts_{id}",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      },
      "delete":{
        "tags":[
          "Account"
        ],
        "summary":"Delete a model instance by {{id}} from the data source.",
        "operationId":"Account.deleteById",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object"
            }
          }
        },
        "deprecated":false
      },
      "patch":{
        "tags":[
          "Account"
        ],
        "summary":"Patch attributes for a model instance and persist it into the data source.",
        "operationId":"Account.prototype.patchAttributes",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Account id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/{id}/replace":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Replace attributes for a model instance and persist it into the data source.",
        "operationId":"Account.replaceById__post_Accounts_{id}_replace",
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"Model id",
            "required":true,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"Model instance data",
            "required":false,
            "schema":{
              "description":"Model instance data",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/findOne":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Find first instance of the model matched by filter from the data source.",
        "operationId":"Account.findOne",
        "parameters":[
          {
            "name":"filter",
            "in":"query",
            "description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "$ref":"#/definitions/Account"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/update":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Update instances of the model matched by {{where}} from the data source.",
        "operationId":"Account.updateAll",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"data",
            "in":"body",
            "description":"An object of model property name/value pairs",
            "required":false,
            "schema":{
              "description":"An object of model property name/value pairs",
              "$ref":"#/definitions/Account"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "description":"Information related to the outcome of the operation",
              "type":"object",
              "properties":{
                "count":{
                  "description":"The number of instances updated",
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/count":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Count instances of the model matched by where from the data source.",
        "operationId":"Account.count",
        "parameters":[
          {
            "name":"where",
            "in":"query",
            "description":"Criteria to match model instances",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "count":{
                  "type":"number",
                  "format":"double"
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/change-stream":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Create a change stream.",
        "operationId":"Account.createChangeStream__post_Accounts_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"formData",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      },
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Create a change stream.",
        "operationId":"Account.createChangeStream__get_Accounts_change-stream",
        "parameters":[
          {
            "name":"options",
            "in":"query",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"file"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/login":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Login a user with username/email and password.",
        "operationId":"Account.login",
        "parameters":[
          {
            "name":"credentials",
            "in":"body",
            "required":true,
            "schema":{
              "type":"object"
            }
          },
          {
            "name":"include",
            "in":"query",
            "description":"Related objects to include in the response. See the description of return value for more details.",
            "required":false,
            "type":"string",
            "format":"JSON"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "description":"The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n\n",
              "type":"object"
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/logout":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Logout a user with access token.",
        "operationId":"Account.logout",
        "parameters":[

        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/confirm":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Confirm a user registration with email verification token.",
        "operationId":"Account.confirm",
        "parameters":[
          {
            "name":"uid",
            "in":"query",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"query",
            "required":true,
            "type":"string"
          },
          {
            "name":"redirect",
            "in":"query",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/reset":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Reset password for a user with email.",
        "operationId":"Account.resetPassword",
        "parameters":[
          {
            "name":"options",
            "in":"body",
            "required":true,
            "schema":{
              "type":"object"
            }
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/change-password":{
      "post":{
        "tags":[
          "Account"
        ],
        "summary":"Change a user's password.",
        "operationId":"Account.changePassword",
        "parameters":[
          {
            "name":"oldPassword",
            "in":"formData",
            "required":true,
            "type":"string"
          },
          {
            "name":"newPassword",
            "in":"formData",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Request was successful"
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/my-remote":{
      "get":{
        "tags":[
          "Account"
        ],
        "operationId":"Account.myRemote",
        "parameters":[

        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"object",
              "properties":{
                "result":{
                  "type":"array",
                  "items":{
                    "type":"object"
                  }
                }
              }
            }
          }
        },
        "deprecated":false
      }
    },
    "/Accounts/stats":{
      "get":{
        "tags":[
          "Account"
        ],
        "summary":"Statistical information for Account registers.",
        "operationId":"Account.stats",
        "parameters":[
          {
            "name":"range",
            "in":"query",
            "description":"hourly, daily, weekly, monthly, yearly, custom",
            "required":true,
            "type":"string"
          },
          {
            "name":"custom",
            "in":"query",
            "description":"{\"start\": date, \"end\": date }",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"where",
            "in":"query",
            "description":"where filter ",
            "required":false,
            "type":"string",
            "format":"JSON"
          },
          {
            "name":"groupBy",
            "in":"query",
            "description":"group by filter ",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request was successful",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/x-any"
              }
            }
          }
        },
        "deprecated":false
      }
    }
  },
  "tags":[
    {
      "name":"AccessToken"
    },
    {
      "name":"ACL"
    },
    {
      "name":"RoleMapping",
      "description":"Map principals to roles"
    },
    {
      "name":"Role"
    },
    {
      "name":"Todo"
    },
    {
      "name":"Note"
    },
    {
      "name":"Container"
    },
    {
      "name":"Account"
    }
  ],
  "consumes":[
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml",
    "text/xml"
  ],
  "produces":[
    "application/json",
    "application/xml",
    "text/xml",
    "application/javascript",
    "text/javascript"
  ],
  "definitions":{
    "x-any":{
      "properties":{

      }
    },
    "Account":{
      "properties":{
        "firstName":{
          "type":"string"
        },
        "lastName":{
          "type":"string"
        },
        "realm":{
          "type":"string"
        },
        "username":{
          "type":"string"
        },
        "email":{
          "type":"string"
        },
        "emailVerified":{
          "type":"boolean"
        },
        "id":{
          "$ref":"#/definitions/ObjectID"
        },
        "createdAt":{
          "type":"string",
          "format":"date-time"
        },
        "updatedAt":{
          "type":"string",
          "format":"date-time"
        }
      },
      "required":[
        "firstName",
        "lastName",
        "email"
      ],
      "additionalProperties":false
    },
    "AccessToken":{
      "properties":{
        "id":{
          "type":"string"
        },
        "ttl":{
          "default":1209600,
          "description":"time to live in seconds (2 weeks by default)",
          "type":"number",
          "format":"double"
        },
        "created":{
          "type":"string",
          "format":"date-time"
        },
        "userId":{
          "$ref":"#/definitions/ObjectID"
        }
      },
      "required":[
        "id"
      ],
      "additionalProperties":false
    },
    "ACL":{
      "properties":{
        "model":{
          "description":"The name of the model",
          "type":"string"
        },
        "property":{
          "description":"The name of the property, method, scope, or relation",
          "type":"string"
        },
        "accessType":{
          "type":"string"
        },
        "permission":{
          "type":"string"
        },
        "principalType":{
          "type":"string"
        },
        "principalId":{
          "type":"string"
        },
        "id":{
          "$ref":"#/definitions/ObjectID"
        }
      },
      "additionalProperties":false
    },
    "Role":{
      "properties":{
        "id":{
          "$ref":"#/definitions/ObjectID"
        },
        "name":{
          "type":"string"
        },
        "description":{
          "type":"string"
        },
        "created":{
          "type":"string",
          "format":"date-time"
        },
        "modified":{
          "type":"string",
          "format":"date-time"
        }
      },
      "required":[
        "name"
      ],
      "additionalProperties":false
    },
    "RoleMapping":{
      "description":"Map principals to roles",
      "properties":{
        "id":{
          "$ref":"#/definitions/ObjectID"
        },
        "principalType":{
          "description":"The principal type, such as USER, APPLICATION, ROLE, or user model name in case of multiple user models",
          "type":"string"
        },
        "principalId":{
          "type":"string"
        },
        "roleId":{
          "$ref":"#/definitions/ObjectID"
        }
      },
      "additionalProperties":false
    },
    "Todo":{
      "properties":{
        "text":{
          "type":"string"
        },
        "dueAt":{
          "type":"string",
          "format":"date-time"
        },
        "done":{
          "default":false,
          "type":"boolean"
        },
        "id":{
          "$ref":"#/definitions/ObjectID"
        },
        "createdAt":{
          "type":"string",
          "format":"date-time"
        },
        "updatedAt":{
          "type":"string",
          "format":"date-time"
        }
      },
      "required":[
        "text"
      ],
      "additionalProperties":false
    },
    "Note":{
      "properties":{
        "title":{
          "type":"string"
        },
        "content":{
          "type":"string"
        },
        "id":{
          "$ref":"#/definitions/ObjectID"
        },
        "createdAt":{
          "type":"string",
          "format":"date-time"
        },
        "updatedAt":{
          "type":"string",
          "format":"date-time"
        }
      },
      "required":[
        "title"
      ],
      "additionalProperties":false
    },
    "ObjectID":{
      "type":"string",
      "pattern":"^[a-fA-F\\d]{24}$"
    }
  }
}